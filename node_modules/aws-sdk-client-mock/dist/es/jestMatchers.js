import { __assign, __spreadArray } from "tslib";
/* eslint-disable @typescript-eslint/no-explicit-any */
import assert from 'assert';
/**
 * Prettyprints command calls for message
 *
 * @param ctx
 * @param calls
 * @returns
 */
function printCalls(ctx, calls) {
    return calls.length > 0 ? __spreadArray([
        'Calls:',
        ''
    ], calls.map(function (c, i) {
        return "  ".concat(i + 1, ". ").concat(c.args[0].constructor.name, ": ").concat(ctx.utils.printReceived(c.args[0].input));
    }), true) : [];
}
export function processMatch(_a) {
    var ctx = _a.ctx, mockClient = _a.mockClient, command = _a.command, check = _a.check, input = _a.input, message = _a.message;
    assert(command &&
        typeof command === 'function' &&
        typeof command.name === 'string' &&
        command.name.length > 0, 'Command must be valid AWS Sdk Command');
    var calls = mockClient.calls();
    var commandCalls = mockClient.commandCalls(command, input);
    var _b = check({ calls: calls, commandCalls: commandCalls }), pass = _b.pass, data = _b.data;
    var msg = function () {
        var cmd = ctx.utils.printExpected(command.name);
        var client = mockClient.clientName();
        var msgParams = {
            calls: calls,
            client: client,
            cmd: cmd,
            data: data,
            commandCalls: commandCalls,
            notPrefix: ctx.isNot ? 'not ' : '',
        };
        return message(msgParams).join('\n');
    };
    return { pass: pass, message: msg };
}
/* Using them for testing */
export var baseMatchers = {
    /**
     * implementation of {@link AwsSdkJestMockMatchers.toHaveReceivedCommandTimes} matcher
     */
    toHaveReceivedCommandTimes: function (mockClient, command, expectedCalls) {
        var _this = this;
        return processMatch({
            ctx: this,
            mockClient: mockClient,
            command: command,
            input: undefined,
            check: function (_a) {
                var commandCalls = _a.commandCalls;
                return ({ pass: commandCalls.length === expectedCalls, data: {} });
            },
            message: function (_a) {
                var client = _a.client, cmd = _a.cmd, commandCalls = _a.commandCalls, notPrefix = _a.notPrefix;
                return __spreadArray([
                    "Expected ".concat(client, " to ").concat(notPrefix, "receive ").concat(cmd, " ").concat(_this.utils.printExpected(expectedCalls), " times"),
                    "".concat(client, " received ").concat(cmd, " ").concat(_this.utils.printReceived(commandCalls.length), " times")
                ], printCalls(_this, commandCalls), true);
            },
        });
    },
    /**
     * implementation of {@link AwsSdkJestMockMatchers.toHaveReceivedCommand} matcher
     */
    toHaveReceivedCommand: function (mockClient, command) {
        var _this = this;
        return processMatch({
            ctx: this,
            mockClient: mockClient,
            command: command,
            input: undefined,
            check: function (_a) {
                var commandCalls = _a.commandCalls;
                return ({ pass: commandCalls.length > 0, data: {} });
            },
            message: function (_a) {
                var client = _a.client, cmd = _a.cmd, notPrefix = _a.notPrefix, commandCalls = _a.commandCalls;
                return __spreadArray([
                    "Expected ".concat(client, " to ").concat(notPrefix, "receive ").concat(cmd),
                    "".concat(client, " received ").concat(cmd, " ").concat(_this.utils.printReceived(commandCalls.length), " times")
                ], printCalls(_this, commandCalls), true);
            },
        });
    },
    /**
     * implementation of {@link AwsSdkJestMockMatchers.toHaveReceivedCommandWith} matcher
     */
    toHaveReceivedCommandWith: function (mockClient, command, input) {
        var _this = this;
        return processMatch({
            ctx: this,
            mockClient: mockClient,
            command: command,
            input: input,
            check: function (_a) {
                var commandCalls = _a.commandCalls;
                return ({ pass: commandCalls.length > 0, data: {} });
            },
            message: function (_a) {
                var client = _a.client, cmd = _a.cmd, calls = _a.calls, notPrefix = _a.notPrefix, commandCalls = _a.commandCalls;
                return __spreadArray([
                    "Expected ".concat(client, " to ").concat(notPrefix, "receive ").concat(cmd, " with ").concat(_this.utils.printExpected(input)),
                    "".concat(client, " received ").concat(cmd, " ").concat(_this.utils.printReceived(commandCalls.length), " times")
                ], printCalls(_this, calls), true);
            },
        });
    },
    /**
     * implementation of {@link AwsSdkJestMockMatchers.toHaveReceivedNthCommandWith} matcher
     */
    toHaveReceivedNthCommandWith: function (mockClient, call, command, input) {
        var _this = this;
        assert(call && typeof call === 'number' && call > 0, 'Call number must be a number and greater as 0');
        return processMatch({
            ctx: this,
            mockClient: mockClient,
            command: command,
            check: function (_a) {
                var calls = _a.calls;
                var received = calls[call - 1].args[0];
                return {
                    pass: received instanceof command && _this.equals(received.input, input),
                    data: {
                        received: received,
                        cmd: _this.utils.printReceived(received.constructor.name),
                    },
                };
            },
            input: input,
            message: function (_a) {
                var cmd = _a.cmd, client = _a.client, calls = _a.calls, data = _a.data, notPrefix = _a.notPrefix;
                return __spreadArray([
                    "Expected ".concat(client, " to ").concat(notPrefix, "receive ").concat(call, ". ").concat(cmd),
                    "".concat(client, " received ").concat(call, ". ").concat(data.cmd, " with input"),
                    _this.utils.printDiffOrStringify(input, data.received.input, 'Expected', 'Received', false)
                ], printCalls(_this, calls), true);
            },
        });
    },
};
/* typing ensures keys matching */
export var aliasMatchers = {
    toReceiveCommandTimes: baseMatchers.toHaveReceivedCommandTimes,
    toReceiveCommand: baseMatchers.toHaveReceivedCommand,
    toReceiveCommandWith: baseMatchers.toHaveReceivedCommandWith,
    toReceiveNthCommandWith: baseMatchers.toHaveReceivedNthCommandWith,
};
// Skip registration if jest expect does not exist
if (typeof expect !== 'undefined' && typeof expect.extend === 'function') {
    expect.extend(__assign(__assign({}, baseMatchers), aliasMatchers));
}
//# sourceMappingURL=jestMatchers.js.map